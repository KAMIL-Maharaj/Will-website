@model List<Alabaster.Models.UpcomingEvent>

@{
    ViewData["Title"] = "Upcoming Events";
}

<style>
    /* Full background image */
    body {
        background: url('../images/Background3.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Poppins', 'Segoe UI', sans-serif;
        color: #fff;
    }

 

    /* Page heading */
    .page-overlay h2 {
        font-size: 3rem;
        font-weight: 900;
        text-align: center;
        margin-bottom: 40px;
        color: #ffffff;
        text-shadow: 2px 2px 10px rgba(0,0,0,0.7);
    }

    /* Top buttons */
    .top-buttons a {
        margin-right: 15px;
        border-radius: 30px;
        font-weight: 700;
        padding: 10px 25px;
        font-size: 1rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .top-buttons a:hover {
        transform: translateY(-3px);
        box-shadow: 0px 5px 15px rgba(0,0,0,0.4);
    }

    /* Event cards */
    .event-card {
        border: none;
        border-radius: 20px;
        overflow: hidden;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(15px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.5);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: #fff;
    }

    .event-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 30px 60px rgba(0,0,0,0.6);
    }

    /* Image wrapper to show full image */
/* Image wrapper to show full image prominently */
.image-wrapper {
    width: 100%;
    height: 250px; /* make it taller for more prominence */
    overflow: hidden;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
}

.image-wrapper img {
    width: 100%;       /* fill the card width */
    height: 100%;      /* fill the wrapper height */
    object-fit: cover; /* cover keeps the aspect ratio and fills the box */
    display: block;
}


    /* Card body */
    .card-body h5 {
        font-size: 1.5rem;
        font-weight: 800;
        margin-bottom: 15px;
        color: #ffffff;
        text-shadow: 1px 1px 5px rgba(0,0,0,0.5);
    }
    .card-body p {
        font-size: 1.1rem;
        margin-bottom: 10px;
        color: #e0e0e0;
    }

    /* Volunteer button */
    .btn-custom {
        background: linear-gradient(135deg, #0072ff, #00c6ff);
        border: none;
        border-radius: 30px;
        padding: 10px 20px;
        font-weight: 700;
        color: #fff;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .btn-custom:hover {
        transform: translateY(-3px);
        box-shadow: 0px 8px 20px rgba(0,0,0,0.5);
        color: #fff;
    }

    /* Responsive */
    @@media (max-width: 992px) {
        .top-buttons {
            text-align: center;
            margin-bottom: 30px;
        }
    }
    @@media (max-width: 768px) {
        .page-overlay h2 {
            font-size: 2.2rem;
        }
    }
</style>

<div class="page-overlay">
    <div class="container">
        <h2>üåü Upcoming Events üåü</h2>

        <div class="text-center top-buttons mb-4">
            <a href="@Url.Action("AddEvent", "Events")" class="btn btn-primary">‚ûï Add Event</a>
            <a href="@Url.Action("Past", "Events")" class="btn btn-warning text-dark">üìú View Past Events</a>
        </div>

        @if (Model != null && Model.Any())
        {
            <div class="row">
                @foreach (var evt in Model)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card event-card shadow-lg">
                            @if (!string.IsNullOrEmpty(evt.ImageUrl))
                            {
                                <div class="image-wrapper">
                                    <img src="@evt.ImageUrl" alt="@evt.Name" />
                                </div>
                            }
                            <div class="card-body">
                                <h5 class="card-title">@evt.Name</h5>
                                <p>@evt.Description</p>
                                <p><strong>Date:</strong> @(DateTime.TryParse(evt.Date, out var dt) ? dt.ToString("MMMM dd, yyyy") : evt.Date)</p>

                                <p><strong>Time:</strong> @evt.Time</p>
                                <a href="@Url.Action("Volunteer", "Events", new { eventId = evt.Id })" class="btn btn-custom">ü§ù Volunteer</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info text-center">
                No upcoming events available at the moment.
            </div>
        }
    </div>
</div>
